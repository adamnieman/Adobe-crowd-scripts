if (!Array.prototype.some){   Array.prototype.some = function(fun /*, thisp*/)   {      var len = this.length;      if (typeof fun != "function")      throw new TypeError();            var thisp = arguments[1];      for (var i = 0; i < len; i++)      {         if (i in this && fun.call(thisp, this[i], i, this))         return true;      }      return false;   };}		                                function SCALE () {		  var map_from = [1, 100];		  var map_to = [1, 0];		  var api = function (value) {		  	if (isNaN(value)) return api;		    if (value < map_from[0]) {value = map_from[0]}		    if (value > map_from[map_from.length-1]) {value = map_from[map_from.length-1]}		    var count = 0;            while (value > map_from[count]) {                count++               }            var map_from_segment = Math.abs(map_from[count]-map_from[count-1])            var map_to_segment = Math.abs(map_to[count]-map_to[count-1])            var ratio = map_to_segment/map_from_segment;            return value * ratio		  };		  api.map_from = function (array) {		    if (!arguments.length) return map_from; 		     		    if (array.some(isNaN)) return api;		    map_from = array;		    return api;		  };		  api.map_to = function (array) {		    if (!arguments.length) return map_to;		    if (array.length != map_from.length) return api;		    if (array.some(isNaN)) return api;		    map_to = array;		    return api;		  };		  return api;		}